import unittest
import sys
import os
import datetime
import pandas as pd
from unittest.mock import patch, MagicMock

# Add the parent directory to the path to import modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from modules.vulns import Vulnerability, CVE

class TestCVE(unittest.TestCase):
    """Test the CVE class functionality."""

    @patch('subprocess.run')
    def test_search_epss_by_cve(self, mock_run):
        """Test searching for EPSS scores."""
        # Mock successful EPSS lookup
        mock_process = MagicMock()
        mock_process.stdout = "0.75"
        mock_run.return_value = mock_process
        
        result = CVE.search_epss_by_cve("CVE-2021-12345")
        self.assertEqual(result, 0.75)
        
        # Mock failed EPSS lookup
        mock_process = MagicMock()
        mock_process.stdout = ""
        mock_run.return_value = mock_process
        
        result = CVE.search_epss_by_cve("invalid-cve")
        self.assertEqual(result, 'Unknown')

    def test_cve_string_representation(self):
        """Test the string representation of a CVE object."""
        cve = CVE("CVE-2021-12345", cvss=7.5, epss=0.8, summary="Test summary",
                  cwe="CWE-79", references=["ref1", "ref2"], 
                  impact={"confidentiality": "HIGH"}, 
                  access={"vector": "NETWORK"}, 
                  capec="CAPEC-63", solution="Patch it",
                  age=30, pocs=["poc1"], kev=True)
        
        string_rep = str(cve)
        
        self.assertIn("CVE-2021-12345", string_rep)
        self.assertIn("7.5", string_rep)
        self.assertIn("0.8", string_rep)
        self.assertIn("Test summary", string_rep)


class TestVulnerability(unittest.TestCase):
    """Test the Vulnerability class functionality."""

    @patch('modules.vulns.CVE.search_epss_by_cve')
    @patch('modules.vulns.pd.read_csv')
    @patch('modules.vulns.requests.get')
    def test_cve_enricher(self, mock_get, mock_read_csv, mock_search_epss):
        """Test the CVE enrichment functionality."""
        # Mock the EPSS search
        mock_search_epss.return_value = 0.75
        
        # Mock the KEV data
        mock_df = MagicMock()
        mock_df.__contains__ = lambda self, key: True
        mock_read_csv.return_value = pd.DataFrame({'cveID': ['CVE-2021-12345']})
        
        # Mock the API response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'solution': 'Update the software',
            'impact': {'integrity': 'COMPLETE'},
            'access': {'vector': 'NETWORK'},
            'references': ['https://example.com'],
            'Published': '2021-01-01T00:00:00',
            'cvss': 7.5,
            'cwe': 'CWE-79',
            'capec': 'CAPEC-63',
            'summary': 'Test vulnerability'
        }
        mock_get.return_value = mock_response
        
        # Create a vulnerability with a CVE
        vuln = Vulnerability(
            title="Test Vuln",
            affected_item="example.com",
            tool="test-tool",
            confidence=90,
            severity="high",
            host="example.com",
            cve_number="CVE-2021-12345"
        )
        
        # Verify the CVE was enriched
        self.assertIsNotNone(vuln.cve)
        self.assertEqual(vuln.cve.cve, "CVE-2021-12345")
        self.assertEqual(vuln.cve.cvss, 7.5)
        self.assertEqual(vuln.cve.epss, 0.75)
        self.assertEqual(vuln.cve.summary, "Test vulnerability")
        self.assertTrue(vuln.cve.kev)

    def test_create_vulnerability_without_cve(self):
        """Test creating a vulnerability without CVE enrichment."""
        vuln = Vulnerability(
            title="Non-CVE Vuln",
            affected_item="test.com",
            tool="scanner",
            confidence=85,
            severity="medium",
            host="test.com",
            summary="Test summary",
            impact="Medium impact",
            solution="Fix it",
            poc="http://test.com/poc",
            references=["ref1"],
            epss=None,
            cvss=5.5,
            cwe="CWE-352",
            capec="CAPEC-62"
        )
        
        self.assertFalse(hasattr(vuln, 'cve'))
        self.assertEqual(vuln.title, "Non-CVE Vuln")
        self.assertEqual(vuln.severity, "medium")
        self.assertEqual(vuln.summary, "Test summary")


if __name__ == '__main__':
    unittest.main()